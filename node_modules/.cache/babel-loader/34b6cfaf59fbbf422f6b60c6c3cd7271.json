{"ast":null,"code":"!function (e, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : e.rgbaster = t();\n}(this, function () {\n  var e = function (e, t) {\n    void 0 === t && (t = 1);\n    var r = new Image();\n    return e.startsWith(\"data\") || (r.crossOrigin = \"Anonymous\"), new Promise(function (n, o) {\n      r.onload = function () {\n        var e = r.width * t,\n            o = r.height * t,\n            i = function (e, t) {\n          var r = document.createElement(\"canvas\");\n          return r.setAttribute(\"width\", e), r.setAttribute(\"height\", t), r.getContext(\"2d\");\n        }(e, o);\n\n        i.drawImage(r, 0, 0, e, o);\n        var a = i.getImageData(0, 0, e, o);\n        n(a.data);\n      };\n\n      var i = function () {\n        return o(new Error(\"An error occurred attempting to load image\"));\n      };\n\n      r.onerror = i, r.onabort = i, r.src = e;\n    });\n  },\n      t = {\n    ignore: [],\n    scale: 1\n  };\n\n  return function (r, n) {\n    void 0 === n && (n = t);\n\n    try {\n      var o = (n = Object.assign({}, t, n)).ignore,\n          i = n.scale;\n      return (i > 1 || i <= 0) && console.warn(\"You set scale to \" + i + \", which isn't between 0-1. This is either pointless (> 1) or a no-op (≤ 0)\"), Promise.resolve(e(r, i)).then(function (e) {\n        return function (e, t) {\n          for (var r = {}, n = 0; n < e.length; n += 4) {\n            var o = e[n + 3];\n\n            if (0 !== o) {\n              var i = Array.from(e.subarray(n, n + 3));\n\n              if (-1 === i.indexOf(void 0)) {\n                var a = o && 255 !== o ? \"rgba(\" + i.concat([o]).join(\",\") + \")\" : \"rgb(\" + i.join(\",\") + \")\";\n                -1 === t.indexOf(a) && (r[a] ? r[a].count++ : r[a] = {\n                  color: a,\n                  count: 1\n                });\n              }\n            }\n          }\n\n          return Object.values(r).sort(function (e, t) {\n            return t.count - e.count;\n          });\n        }(e, o);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n});","map":{"version":3,"sources":["../src/helpers.ts","../src/index.ts"],"names":["const","width","height","canvas","document","createElement","setAttribute","getContext","getImageData","src","scale","img","Image","startsWith","crossOrigin","Promise","resolve","reject","onload","context","drawImage","errorHandler","Error","onerror","onabort","data","ignore","countMap","i","length","alpha","rgbComponents","Array","from","subarray","indexOf","undefined","color","join","count","Object","values","sort","a","b","defaultOpts","opts","console","warn","getCounts"],"mappings":"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","sourcesContent":["\nexport const getContext = (width, height) => {\n  const canvas = document.createElement('canvas')\n  canvas.setAttribute('width', width)\n  canvas.setAttribute('height', height)\n  return canvas.getContext('2d')\n}\n\nexport const getImageData = (src: string, scale: number = 1): Promise<Uint8ClampedArray> => {\n  const img = new Image()\n\n  // Can't set cross origin to be anonymous for data url's\n  // https://github.com/mrdoob/three.js/issues/1305\n  if (!src.startsWith('data')) img.crossOrigin = 'Anonymous'\n\n  return new Promise((resolve, reject) => {\n    img.onload = function () {\n      const width = img.width * scale\n      const height = img.height * scale\n      const context = getContext(width, height)\n      context.drawImage(img, 0, 0, width, height)\n\n      const { data } = context.getImageData(0, 0, width, height)\n      resolve(data)\n    }\n\n    const errorHandler = () => reject(new Error('An error occurred attempting to load image'))\n\n    img.onerror = errorHandler\n    img.onabort = errorHandler\n    img.src = src\n  })\n}\n\nexport const getCounts = (data: Uint8ClampedArray, ignore: string[]): [] => {\n  const countMap = {}\n\n  for (let i = 0; i < data.length; i += 4 /* 4 gives us r, g, b, and a*/) {\n    let alpha: number = data[i + 3]\n    // skip FULLY transparent pixels\n    if (alpha === 0) continue\n\n    let rgbComponents: number[] = Array.from(data.subarray(i, i + 3))\n\n    // skip undefined data\n    if (rgbComponents.indexOf(undefined) !== -1) continue\n\n    let color: string = alpha && alpha !== 255\n      ? `rgba(${[...rgbComponents, alpha].join(',')})`\n      : `rgb(${rgbComponents.join(',')})`\n\n    // skip colors in the ignore list\n    if (ignore.indexOf(color) !== -1) continue\n\n    if (countMap[color]) {\n      countMap[color].count++\n    } else {\n      countMap[color] = { color, count: 1 }\n    }\n  }\n\n  const counts = Object.values(countMap) as []\n  return counts.sort((a: any, b: any) => b.count - a.count)\n}\n","import {\n  getImageData,\n  getCounts\n} from './helpers'\n\ninterface Opts {\n  ignore?: string[]\n  scale?: number\n  skipTransparentPixels?: boolean\n}\n\nconst defaultOpts: Opts = {\n  ignore: [],\n  scale: 1\n}\n\nexport default async function (src: string, opts: Opts = defaultOpts): Promise<{ color: string, count: number }[] > {\n  opts = { ...defaultOpts, ...opts }\n\n  const {\n    ignore, // for example, to ignore white and black:  [ 'rgb(0,0,0)', 'rgb(255,255,255)' ]\n    scale   // 0 = best performance, lowest fidelity\n            // 1 = best fidelity, worst performance\n  } = opts\n\n  if (scale > 1 || scale <= 0) {\n    console.warn(`You set scale to ${scale}, which isn't between 0-1. This is either pointless (> 1) or a no-op (≤ 0)`)\n  }\n\n  const data = await getImageData(src, scale)\n  return getCounts(data, ignore)\n}\n"]},"metadata":{},"sourceType":"script"}